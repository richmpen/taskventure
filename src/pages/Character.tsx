import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { motion } from 'framer-motion';

// –¢–∏–ø—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
enum StatType {
  STRENGTH = 'strength',
  INTELLIGENCE = 'intelligence',
  AGILITY = 'agility',
  CHARISMA = 'charisma'
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
interface StatInfo {
  name: string;
  description: string;
  icon: string;
  color: string;
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
interface CharacterStats {
  strength: number;
  intelligence: number;
  agility: number;
  charisma: number;
}

const Character: React.FC = () => {
  const { currentUser, updateUser } = useAuth();
  const [activeTab, setActiveTab] = useState<'stats' | 'achievements' | 'inventory'>('stats');
  const [showConfirm, setShowConfirm] = useState(false);
  const [selectedStat, setSelectedStat] = useState<StatType | null>(null);
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
  const statsInfo: Record<StatType, StatInfo> = {
    [StatType.STRENGTH]: {
      name: '–°–∏–ª–∞',
      description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –≤ –±–∏—Ç–≤–∞—Ö –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏.',
      icon: 'üí™',
      color: 'text-red-500'
    },
    [StatType.INTELLIGENCE]: {
      name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
      description: '–î–∞—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—É—á–µ–Ω–∏–µ–º.',
      icon: 'üß†',
      color: 'text-blue-500'
    },
    [StatType.AGILITY]: {
      name: '–õ–æ–≤–∫–æ—Å—Ç—å',
      description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –≤ –±–∏—Ç–≤–∞—Ö –∏ —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –∞—Ç–∞–∫.',
      icon: 'üèÉ',
      color: 'text-green-500'
    },
    [StatType.CHARISMA]: {
      name: '–•–∞—Ä–∏–∑–º–∞',
      description: '–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º –∏ —É–ª—É—á—à–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥–æ–π.',
      icon: 'üåü',
      color: 'text-yellow-500'
    }
  };
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const achievements = [
    {
      id: 'ach1',
      title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É',
      icon: 'üö∂',
      unlocked: true
    },
    {
      id: 'ach2',
      title: '–ë–æ–µ–≤–æ–µ –∫—Ä–µ—â–µ–Ω–∏–µ',
      description: '–í—ã–∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –±–∏—Ç–≤—É',
      icon: '‚öîÔ∏è',
      unlocked: currentUser && currentUser.level >= 2
    },
    {
      id: 'ach3',
      title: '–ú–∞—Å—Ç–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å 10 –∑–∞–¥–∞—á',
      icon: 'üìù',
      unlocked: false
    },
    {
      id: 'ach4',
      title: '–ì–µ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      description: '–î–æ—Å—Ç–∏—á—å 5 —É—Ä–æ–≤–Ω—è',
      icon: 'üèÜ',
      unlocked: false
    }
  ];
  
  // –ü—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
  const inventory = [
    {
      id: 'item1',
      name: '–ö–æ—Ñ–µ–π–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫',
      description: '+10 –∫ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É',
      icon: '‚òï',
      usable: true
    },
    {
      id: 'item2',
      name: '–©–∏—Ç —Ñ–æ–∫—É—Å–∞',
      description: '+5 –∫ –∑–∞—â–∏—Ç–µ –≤ –±–∏—Ç–≤–∞—Ö',
      icon: 'üõ°Ô∏è',
      usable: false,
      equipped: true
    }
  ];

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const getStatValue = (statType: StatType): number => {
    if (!currentUser || !currentUser.character || !currentUser.character.stats) {
      return 10; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    switch (statType) {
      case StatType.STRENGTH:
        return currentUser.character.stats.strength || 10;
      case StatType.INTELLIGENCE:
        return currentUser.character.stats.intelligence || 10;
      case StatType.AGILITY:
        return currentUser.character.stats.agility || 10;
      case StatType.CHARISMA:
        return currentUser.character.stats.charisma || 10;
      default:
        return 10;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const upgradeStat = async (statType: StatType) => {
    if (!currentUser) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å)
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ availablePoints
    
    const stats = currentUser.character?.stats || {
      strength: 10,
      intelligence: 10,
      agility: 10,
      charisma: 10
    };
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
    const updatedStats: CharacterStats = {
      ...stats,
    };
    
    switch (statType) {
      case StatType.STRENGTH:
        updatedStats.strength += 1;
        break;
      case StatType.INTELLIGENCE:
        updatedStats.intelligence += 1;
        break;
      case StatType.AGILITY:
        updatedStats.agility += 1;
        break;
      case StatType.CHARISMA:
        updatedStats.charisma += 1;
        break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await updateUser({
      character: {
        ...currentUser.character,
        stats: updatedStats
      }
    });
    
    setShowConfirm(false);
    setSelectedStat(null);
  };
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const StatConfirm = () => {
    if (!selectedStat) return null;
    
    const stat = statsInfo[selectedStat];
    const currentValue = getStatValue(selectedStat);
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="container-ios max-w-md w-full">
          <h2 className="text-xl font-bold mb-4">–£–ª—É—á—à–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É?</h2>
          
          <div className="flex items-center mb-4">
            <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center text-2xl mr-3">
              {stat.icon}
            </div>
            <div>
              <h3 className={`font-bold ${stat.color}`}>{stat.name}</h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">{stat.description}</p>
            </div>
          </div>
          
          <div className="mb-6">
            <p className="text-sm">
              –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <span className="font-medium">
                {currentValue}
              </span>
            </p>
            <p className="text-sm">
              –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <span className="font-medium text-primary">
                {currentValue + 1}
              </span>
            </p>
          </div>
          
          <div className="flex justify-end space-x-3">
            <button 
              onClick={() => {
                setShowConfirm(false);
                setSelectedStat(null);
              }}
              className="px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-ios"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button 
              onClick={() => selectedStat && upgradeStat(selectedStat)}
              className="btn-primary"
            >
              –£–ª—É—á—à–∏—Ç—å
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="container mx-auto px-4 py-6">
      <h1 className="text-2xl font-bold mb-6">–ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂</h1>
      
      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
      <div className="container-ios mb-6">
        <div className="flex flex-col md:flex-row md:items-center">
          <div className="flex-shrink-0 mb-4 md:mb-0 md:mr-6">
            <div className="w-24 h-24 bg-primary/20 rounded-full flex items-center justify-center text-5xl mx-auto">
              üë§
            </div>
          </div>
          
          <div className="flex-grow">
            <h2 className="text-xl font-bold">{currentUser?.username || '–ò–≥—Ä–æ–∫'}</h2>
            <div className="flex items-center mt-1 mb-3">
              <span className="text-primary font-bold mr-2">–£—Ä–æ–≤–µ–Ω—å {currentUser?.level || 1}</span>
              <span className="text-sm text-gray-600 dark:text-gray-400">
                {currentUser?.experience || 0} / {(currentUser?.level || 1) * 1000} XP
              </span>
            </div>
            
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-3">
              <div 
                className="bg-primary h-2 rounded-full" 
                style={{ width: `${((currentUser?.experience || 0) % 1000) / 10}%` }}
              ></div>
            </div>
            
            <p className="text-sm text-gray-600 dark:text-gray-400">
              –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {(currentUser?.level || 1) * 1000 - (currentUser?.experience || 0)} XP
            </p>
          </div>
        </div>
      </div>
      
      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="flex justify-between border-b border-gray-200 dark:border-gray-700 mb-6">
        <button 
          className={`pb-2 px-4 ${activeTab === 'stats' ? 'border-b-2 border-primary text-primary font-medium' : 'text-gray-500'}`}
          onClick={() => setActiveTab('stats')}
        >
          –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        </button>
        <button 
          className={`pb-2 px-4 ${activeTab === 'achievements' ? 'border-b-2 border-primary text-primary font-medium' : 'text-gray-500'}`}
          onClick={() => setActiveTab('achievements')}
        >
          –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        </button>
        <button 
          className={`pb-2 px-4 ${activeTab === 'inventory' ? 'border-b-2 border-primary text-primary font-medium' : 'text-gray-500'}`}
          onClick={() => setActiveTab('inventory')}
        >
          –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
        </button>
      </div>
      
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="mb-6">
        {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
        {activeTab === 'stats' && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="space-y-4"
          >
            {Object.entries(statsInfo).map(([key, stat]) => (
              <div 
                key={key}
                className="container-ios flex flex-col sm:flex-row sm:items-center sm:justify-between p-4"
              >
                <div className="flex items-center mb-3 sm:mb-0">
                  <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center text-2xl mr-3">
                    {stat.icon}
                  </div>
                  <div>
                    <h3 className={`font-bold ${stat.color}`}>{stat.name}</h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{stat.description}</p>
                  </div>
                </div>
                
                <div className="flex items-center justify-between sm:justify-end sm:flex-shrink-0">
                  <span className="font-bold text-xl mr-4">
                    {getStatValue(key as StatType)}
                  </span>
                  <button 
                    className="btn-primary text-sm py-1"
                    onClick={() => {
                      setSelectedStat(key as StatType);
                      setShowConfirm(true);
                    }}
                  >
                    –£–ª—É—á—à–∏—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </motion.div>
        )}
        
        {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
        {activeTab === 'achievements' && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="grid grid-cols-1 md:grid-cols-2 gap-4"
          >
            {achievements.map((achievement) => (
              <div 
                key={achievement.id}
                className={`container-ios p-4 ${!achievement.unlocked ? 'opacity-60' : ''}`}
              >
                <div className="flex items-center">
                  <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center text-2xl mr-3">
                    {achievement.icon}
                  </div>
                  <div>
                    <h3 className="font-bold">
                      {achievement.title}
                      {achievement.unlocked && (
                        <span className="text-green-500 ml-2">‚úì</span>
                      )}
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{achievement.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </motion.div>
        )}
        
        {/* –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å */}
        {activeTab === 'inventory' && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="space-y-4"
          >
            {inventory.length > 0 ? (
              inventory.map((item) => (
                <div 
                  key={item.id}
                  className="container-ios p-4"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center text-2xl mr-3">
                        {item.icon}
                      </div>
                      <div>
                        <h3 className="font-bold">
                          {item.name}
                          {item.equipped && (
                            <span className="ml-2 text-xs bg-primary/20 text-primary px-2 py-0.5 rounded-full">
                              –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ
                            </span>
                          )}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{item.description}</p>
                      </div>
                    </div>
                    
                    {item.usable && (
                      <button className="btn-secondary text-sm py-1">
                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                      </button>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-10 text-gray-500 dark:text-gray-400">
                <p className="text-4xl mb-3">üéí</p>
                <p>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>
                <p className="text-sm mt-2">
                  –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ –≤ –±–∏—Ç–≤–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
                </p>
              </div>
            )}
          </motion.div>
        )}
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
      {showConfirm && <StatConfirm />}
    </div>
  );
};

export default Character; 