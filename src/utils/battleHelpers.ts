import { v4 as uuidv4 } from 'uuid';
import { Character, CharacterStat, Enemy, BattleResult } from './types';
import { getItem, setItem, STORAGE_KEYS } from './storage';
import { getCurrentDateISO } from './dateHelpers';
import { addXpToCharacter, addGoldToCharacter } from './characterHelpers';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –±–∏—Ç–≤
 */
export const getBattleHistory = async (): Promise<BattleResult[]> => {
  const history = await getItem<BattleResult[]>(STORAGE_KEYS.BATTLE_HISTORY);
  return history || [];
};

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã
 */
export const saveBattleResult = async (result: BattleResult): Promise<void> => {
  const history = await getBattleHistory();
  history.unshift(result); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏
  await setItem(STORAGE_KEYS.BATTLE_HISTORY, history);
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
 */
export const generateEnemies = (playerLevel: number): Enemy[] => {
  const enemies: Enemy[] = [
    {
      id: "goblin",
      name: "–ì–æ–±–ª–∏–Ω",
      level: Math.max(1, playerLevel - 1),
      health: 30 + (playerLevel - 1) * 5,
      maxHealth: 30 + (playerLevel - 1) * 5,
      attack: 5 + (playerLevel - 1) * 2,
      defense: 3 + (playerLevel - 1) * 1,
      xpReward: 15 + (playerLevel - 1) * 3,
      goldReward: 10 + (playerLevel - 1) * 2,
      image: "üßå"
    },
    {
      id: "skeleton",
      name: "–°–∫–µ–ª–µ—Ç",
      level: playerLevel,
      health: 40 + playerLevel * 5,
      maxHealth: 40 + playerLevel * 5,
      attack: 7 + playerLevel * 2,
      defense: 5 + playerLevel * 1,
      xpReward: 20 + playerLevel * 3,
      goldReward: 15 + playerLevel * 2,
      image: "üíÄ"
    },
    {
      id: "orc",
      name: "–û—Ä–∫",
      level: playerLevel + 1,
      health: 60 + (playerLevel + 1) * 7,
      maxHealth: 60 + (playerLevel + 1) * 7,
      attack: 10 + (playerLevel + 1) * 3,
      defense: 8 + (playerLevel + 1) * 2,
      xpReward: 30 + (playerLevel + 1) * 5,
      goldReward: 25 + (playerLevel + 1) * 3,
      image: "üëπ"
    },
    {
      id: "dragon",
      name: "–î—Ä–∞–∫–æ–Ω",
      level: Math.max(5, playerLevel + 2),
      health: 100 + (playerLevel + 2) * 10,
      maxHealth: 100 + (playerLevel + 2) * 10,
      attack: 15 + (playerLevel + 2) * 4,
      defense: 12 + (playerLevel + 2) * 3,
      xpReward: 50 + (playerLevel + 2) * 8,
      goldReward: 40 + (playerLevel + 2) * 5,
      image: "üêâ"
    }
  ];
  
  return enemies;
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω –∞—Ç–∞–∫–∏
 */
export const calculateAttackDamage = (attacker: { attack: number }, defender: { defense: number }): number => {
  // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
  let damage = attacker.attack - defender.defense / 2;
  
  // –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å (80% - 120% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–Ω–∞)
  const randomFactor = 0.8 + Math.random() * 0.4;
  damage = damage * randomFactor;
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –≤—Å–µ–≥–¥–∞ 1
  return Math.max(1, Math.floor(damage));
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è
 */
export const calculateDodgeChance = (character: Character): number => {
  // –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è
  return Math.min(0.05 + character.stats[CharacterStat.DEXTERITY] * 0.005, 0.3);
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
 */
export const calculateCritChance = (character: Character): number => {
  // –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
  return Math.min(0.05 + character.stats[CharacterStat.DEXTERITY] * 0.003 + character.stats[CharacterStat.INTELLIGENCE] * 0.002, 0.25);
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–Ω–∞
 */
export const calculateCritMultiplier = (character: Character): number => {
  // –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∏—Ç–∞ 150%
  return 1.5 + character.stats[CharacterStat.STRENGTH] * 0.01;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 */
export const getPlayerHealth = (character: Character): number => {
  // –ë–∞–∑–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ 100
  return 100 + character.level * 10 + character.stats[CharacterStat.ENDURANCE] * 5;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 */
export const getPlayerAttack = (character: Character): number => {
  // –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞ 10
  return 10 + character.level * 2 + character.stats[CharacterStat.STRENGTH] * 2 + character.stats[CharacterStat.DEXTERITY] * 0.5;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 */
export const getPlayerDefense = (character: Character): number => {
  // –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ 5
  return 5 + character.level * 1 + character.stats[CharacterStat.ENDURANCE] * 1 + character.stats[CharacterStat.STRENGTH] * 0.3;
};

/**
 * –ü—Ä–æ–≤–æ–¥–∏—Ç —Ö–æ–¥ –±–æ—è
 */
export const processBattleTurn = (
  playerHealth: number,
  enemyHealth: number,
  playerAttack: number,
  enemyAttack: number,
  playerDefense: number,
  enemyDefense: number,
  dodgeChance: number,
  critChance: number,
  critMultiplier: number
): {
  newPlayerHealth: number;
  newEnemyHealth: number;
  playerDamageDealt: number;
  enemyDamageDealt: number;
  playerCrit: boolean;
  enemyCrit: boolean;
  playerDodged: boolean;
  enemyDodged: boolean;
} => {
  // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
  const playerCrit = Math.random() < critChance;
  const enemyDodged = Math.random() < 0.1; // –£ –≤—Ä–∞–≥–∞ –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è 10%
  
  let playerDamageDealt = 0;
  if (!enemyDodged) {
    playerDamageDealt = calculateAttackDamage({ attack: playerAttack }, { defense: enemyDefense });
    if (playerCrit) {
      playerDamageDealt = Math.floor(playerDamageDealt * critMultiplier);
    }
  }
  
  // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç
  const enemyCrit = Math.random() < 0.1; // –£ –≤—Ä–∞–≥–∞ –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ 10%
  const playerDodged = Math.random() < dodgeChance;
  
  let enemyDamageDealt = 0;
  if (!playerDodged) {
    enemyDamageDealt = calculateAttackDamage({ attack: enemyAttack }, { defense: playerDefense });
    if (enemyCrit) {
      enemyDamageDealt = Math.floor(enemyDamageDealt * 1.5); // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∏—Ç–∞ –≤—Ä–∞–≥–∞ 150%
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
  const newEnemyHealth = Math.max(0, enemyHealth - playerDamageDealt);
  const newPlayerHealth = Math.max(0, playerHealth - enemyDamageDealt);
  
  return {
    newPlayerHealth,
    newEnemyHealth,
    playerDamageDealt,
    enemyDamageDealt,
    playerCrit,
    enemyCrit,
    playerDodged,
    enemyDodged
  };
};

/**
 * –ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –±–∏—Ç–≤—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 */
export const simulateBattle = async (
  character: Character,
  enemy: Enemy
): Promise<BattleResult> => {
  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const playerMaxHealth = getPlayerHealth(character);
  const playerAttack = getPlayerAttack(character);
  const playerDefense = getPlayerDefense(character);
  const dodgeChance = calculateDodgeChance(character);
  const critChance = calculateCritChance(character);
  const critMultiplier = calculateCritMultiplier(character);
  
  let playerHealth = playerMaxHealth;
  let enemyHealth = enemy.health;
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –±–æ–π –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç
  while (playerHealth > 0 && enemyHealth > 0) {
    const turnResult = processBattleTurn(
      playerHealth,
      enemyHealth,
      playerAttack,
      enemy.attack,
      playerDefense,
      enemy.defense,
      dodgeChance,
      critChance,
      critMultiplier
    );
    
    playerHealth = turnResult.newPlayerHealth;
    enemyHealth = turnResult.newEnemyHealth;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  const playerWon = playerHealth > 0;
  
  // –ù–∞–≥—Ä–∞–¥–∞ –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã
  let xpEarned = 0;
  let goldEarned = 0;
  if (playerWon) {
    xpEarned = enemy.xpReward;
    goldEarned = enemy.goldReward;
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
    await addXpToCharacter(xpEarned, character);
    await addGoldToCharacter(goldEarned, character);
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã
  const result: BattleResult = {
    id: uuidv4(),
    enemyId: enemy.id,
    enemyName: enemy.name,
    playerWon,
    xpEarned,
    goldEarned,
    itemsDropped: [], // –ü–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
    date: getCurrentDateISO()
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  await saveBattleResult(result);
  
  return result;
}; 